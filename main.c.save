#include <stdio.h>
#include <unistd.h>
#include <SDL2/SDL.h>
#include <SDL2/SDL_ttf.h>
#include "constants.h"

SDL_Window* window;
SDL_Renderer* renderer;
TTF_Font* font_monospace;
TTF_Font* font_sans;

void handle_user_exit() {
    puts("ur sus");
    handle_exit();
}

void handle_exit() {
    if(window)         SDL_DestroyWindow(window);
    SDL_Quit();
    if(font_monospace) TTF_CloseFont(font_monospace);
    if(font_sans)      TTF_CloseFont(font_sans);
    TTF_Quit();
    exit(0);
}

void vent_on_sdl_error(const char* vent, unsigned char should_exit) {
    fprintf(stderr, "Vent: %s", vent);
    if(should_exit) handle_exit();
}

void render_text(SDL_Renderer* renderer, SDL_Font* font, SDL_Color color, int x, int y, const char* string) {
    SDL_Surface *surf = TTF_RenderText_Blended(font, string, color);
    if(!surf) goto clean;

    SDL_Texture *texture = SDL_CreateTextureFromSurface(renderer, surf);
    if(!texture) goto clean;

    
    clean:
    SDL_FreeSurface(surf);
}

int main(int argc, char *const argv[]) {
    int result;
    SDL_Event next_event;

    // get command-line options
    while(1) {
        result = getopt(argc, argv, "h");
        if (result == -1) {
            break;
        }
    }

    // initialize sdl
    if(SDL_Init(SDL_INIT_VIDEO) < 0) vent_on_sdl_error("", 1);

    // initialize ttf library
    TTF_Init();

    // load in some fonts
    font_monospace = TTF_OpenFont(DUCKOS_FONT_LOCATION_MONO, DUCKOS_FONT_SIZE_TERM);
    font_sans =      TTF_OpenFont(DUCKOS_FONT_LOCATION_SANS, DUCKOS_FONT_SIZE_WINTITLE);
    if(!font_sans) {
        fputs("failed to load " DUCKOS_FONT_LOCATION_SANS, stderr);
        return 1;
    }
    if(!font_monospace) {
        fputs("failed to load " DUCKOS_FONT_LOCATION_MONO, stderr);
        return 1;
    }

    // create window
    window = SDL_CreateWindow("DuckOS Native",
        SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED, 960, 540,
        SDL_WINDOW_OPENGL);
    if(!window) {
        fputs("Window creation vented\n", stderr);
        return 1;
    }

    // get window renderer
    // surface = SDL_GetWindowSurface(window);
    renderer = SDL_CreateRenderer(window, -1, SDL_RENDERER_ACCELERATED);
    if(!renderer) {
        fputs("Renderer getting vented\n", stderr);
        return 1;
    }

    while(1) {
        if(SDL_PollEvent(&next_event)){
            switch(next_event.type) {
                case SDL_QUIT:
                    handle_exit();
                    break;
            }
        }
        SDL_SetRenderDrawColor(renderer, DUCKOS_ACCENT_BACKGROUND);
        SDL_RenderClear(renderer);
        render_text(renderer, font_monospace, { DUCKOS_ACCENT_LIGHT }, 4, 4, "Sus");
        SDL_RenderPresent(renderer);
        // SDL_UpdateWindowSurface(window);
    }

    return 0;
}
